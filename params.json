{"name":"RFTM","tagline":"","body":"The RFTM is an Open Source, collaborative testing methodology that can be applied to all Radio Frequency (wireless) technologies. Throughout this methodology, we'll use various real-world wireless protocol examples\r\n\r\n[Signals and Modulation](basics.html)\r\n\r\n[Information Sources](information_sources.html)\r\n\r\n[Receiving Signals](receiving_signals.html)\r\n\r\n[Developing an FSK receiver step-by-step](fsk_receiver.html)\r\n\r\nDeveloping a digital (ASK) receiver step-by-step\r\n------------------------------------------------\r\n\r\n### Configure the GNU Radio environment\r\n\r\nFollow the steps in the FSK receiver example up to the point of receiving the baseband signal. In our case the signal (from an Audi A4 keyfob) is at 433.920MHz:\r\n\r\n![](images/ask_baseband.png)\r\n\r\n### Signal visualization and identification\r\n\r\nOpen the file in Baudline (see FSK receiver for details of how to do this):\r\n\r\n![](images/ask_baudline.png)\r\n\r\nYou can see at the beginning of the data burst (the preamble), the signal alternates between a large amplitude and zero down the screen (time axis). This clearly shows that the signal has been modulated using Amplitude Shift Keying (ASK), which is also known as On-Off Keying (OOK).\r\n\r\n### Filtering\r\n\r\nWe now want to focus in on the signal of interest and filter out any other signals present in the baseband we have recorded. Add a \"Low Pass Filter\" block between the \"Multiply\" block output and the \"WX GUI FFT Sink\" input.\r\n\r\n-   Set \"Cutoff Freq\" to 150e3 - this is the maximum frequency (of the modulated signal) that we want to display\r\n\r\n<!-- -->\r\n\r\n-   Set \"Transition Width\" to 50e3 - this is the bandwidth over which the filter will act i.e. the smaller the number the more aggressive the filter.\r\n\r\nRestart the flow-graph and you should see something like this:\r\n\r\n![](images/grc_filtered_signal.png)\r\n\r\n### Demodulating\r\n\r\nWe are making the assumption that based on the output we observed in Baudline, the modulation scheme is ASK (to be precise, \"2-ASK\" or \"Binary ASK\" where the amplitude is increased for a \"1\" and remains low for a \"0\"). Therefore, we need to add an ASK demodulator - \"AM Demod) Add a \"Quadrature Demod\" and set the \"Gain\" to be 1.\r\n\r\nAdd a \"File Sink\" and set its input type to be \"float\" (orange coloured) and set the filename to be something like \"4M\\_filtered\\_demod\"\r\n\r\nConnect the output of the \"Low Pass Filter\" to the input of the \"AM Demod\"\r\n\r\nSet the following \"AM Demod\" settings:\r\n\r\n-   \"Channel Rate\": 48e3\r\n\r\n<!-- -->\r\n\r\n-   \"Audio Decimation\": 1\r\n\r\nConnect the output of the \"AM Demod\" to the input of the \"File Sink\"\r\n\r\nIn \"File Source\" set \"Repeat to \"No\"\r\n\r\nYour flow-graph should now look like this:\r\n\r\n![](images/ask_flow_demod.png)\r\n\r\nRun the flow-graph and it will produce a file that hopefully will contain demodulated data.\r\n\r\n### Visualising the data\r\n\r\nWe should now have a demodulated file that can be loaded into Baudline.\r\n\r\n**Note: Remember, if your \"4M\\_filtered\\_demod\" file is larger than 50Mb then you will need to split it into chunks again.**\r\n\r\nStart Baudline and load your demod file - use all the same parameters as before, but this time change \"Channels\" to 1 (it is no longer a complex baseband signal - it is a demodulated signal). Click \"Open\" and it should look something like this:\r\n\r\n![](images/ask_demod2.png)\r\n\r\nEnsure that the separate \"Waveform\" window is open (main menu -\\> displays -\\> waveform)\r\n\r\n![](images/ask_demod1.png)\r\n\r\nThese are the data bits represented by the original complex baseband signal we saw in Baudline. It also confirms that the data was modulated using 2-ASK.\r\n\r\n### Further filtering and clock recovery\r\n\r\nIf we look at the signal with respect to the scale, we can see that by choosing a peak, it's approximately 3.6 bits per millisecond, so it looks like 3600 Baud.\r\n\r\n![](images/ask_demod3.png)\r\n\r\nOk, now we think we have the Baud rate, we can accurately add a new \"Low Pass Filter\" in between the \"AM Demod\" and the \"File Sink\". The settings should be as follows:\r\n\r\n-   Cutoff Freq = 4000 (roughly the Baud rate)\r\n\r\n<!-- -->\r\n\r\n-   Transition Width = 2000 (roughly half the Baud rate)\r\n\r\nAlso, you may have noticed that the flow-graph has been running very slowly since we started demodulating the data. Let's try and work out why:\r\n\r\nThe sample rate is currently 4,000,000 and the Baud rate is 3600, so if we divide 4,000,000 by 3600 we get the number of samples per symbol - 1111! That's why it's running slowly... we don't need anywhere near 1111 samples to represent each bit.\r\n\r\nIn the \"Low Pass Filter\" set \"FIR Type\" to \"Float-Float (Decimating)\" and set \"Decimation\" to 10. This will decimate the signal (reduce the sample rate) by a factor of 10\r\n\r\nNow re-run the flow-graph and load the resulting demodulated file into Baudline and the \"Waveform view\" should now look like this:\r\n\r\n**Note: When you load the file back into Baudline don't forget that the sample rate has been decimated by 100 and is now, therefore, 40,000 instead of 4,000,000**\r\n\r\n![](images/ask_demod_filtered.png)\r\n\r\nWe're not quite ready to recover the bits yet though, as the signal should be alternating about 0dBm (the centre line in the waveform view. It's actually down towards -90dBm, so it needs to be increased.\r\n\r\nAdd an \"Add Const\" block in between the second \"Low Pass Filter\" and the \"File Sink\" and set the \"Constant\" value to be 0.45 (this value was determined through trial-and-error), to increase the signal level. The output should now look like this:\r\n\r\n![](images/ask_demod_filtered2.png)\r\n\r\n### Data recovery\r\n\r\nNow we are ready to recover the digital data. First we need to perform clock recovery - add a \"Clock Recovery MM\" block and set the following values:\r\n\r\n-   \"Gain Omega\": 0.01\r\n\r\n<!-- -->\r\n\r\n-   \"Mu\": 0\r\n\r\n<!-- -->\r\n\r\n-   \"Gain Mu\": 0.1\r\n\r\n<!-- -->\r\n\r\n-   \"Omega Relative Limit\": 0.01\r\n\r\nThe final value we need is \"Omega\" - this is the number of samples per symbol. We previously calculated this to be 1111.11 and so decimated the signal by a factor of 10 so \"Omega\" now needs to be set to 111.11 (1111.11 / 10).\r\n\r\nAdd a \"Binary Slicer\" to the output of the \"Clock Recovery MM\" block\r\n\r\nAdd a \"File Sink\" to the output of the \"Binary Slicer\" - you'll need to set the input type of the \"File Sink\" to \"Byte\" (pink coloured). Set the filename to be something like \"bitfile\"\r\n\r\nYour final flow-graph should look something like this:\r\n\r\n![](images/ask_full_flowgraph.png)\r\n\r\nOpen up the \"bitfile\" file in a hex editor. Remember the preamble of \"0101010101...\"? You need to search for the preamble in the \"bitfile\", but if you look carefully, you can see that each byte in the file represents one bit i.e a \"0\" bit is represented by the byte \"00\" and a \"1\" bit is represented by the byte \"01\", so to search for the preamble you need to search for: \"0001000100010001\". The result of the search is shown below, the rest of the data follows the preamble:\r\n\r\n![](images/ask_hex_output.png)\r\n\r\nYou have now successfully retrieved the data from an ASK RF transmission!\r\n\r\n### Communicating with the receiver in real-time\r\n\r\nRather than using a file as a sink you can use a \"TCP Sink\" block, bind it to a socket and receive data from it via TCP\r\n\r\nTransmitting data\r\n=================\r\n\r\n\\<span style=\"color:red\"\\> **NOTE: Before transmitting any data, please fully read the [Legal considerations](https://wiki.pentest.ngs/index.php/RFTM#Legal_considerations) section** \\</span\\>\r\n\r\nRF shielding (Faraday cages)\r\n----------------------------\r\n\r\nIf you need to transmit signals on bands for which it would normally be illegal to do so e.g. Broadcast radio or 3G cellular then this can be performed within an RF-shielded environment. These come in all shapes and sizes, from small:\r\n\r\n![](images/rf_enclosure.png)\r\n\r\nto large:\r\n\r\n![](images/screened_room.jpg)\r\n\r\nDirect connection using attenuators\r\n-----------------------------------\r\n\r\nAnother approach is to directly connect your transmitter to your receiver via a cable so that no radio waves are transmitted. However, in order to do this without damaging the receiver you need to use in-line attenuators (see below) to reduce the signal level, as would occur if it was transmitted via an antenna\r\n\r\n![](images/attenuator.jpg)\r\n\r\nDeveloping a digital (FSK) transmitter step-by-step\r\n---------------------------------------------------\r\n\r\nIf you have captured some data from a target system using a receiver and you now wish to modify that data and re-transmit it (for example if you are developing an RF-based fuzzer) the following process can be followed. This transmitter is assumed to use FSK modulation (this example is actually a transmitter developed for the [io-homecontrol protocol](https://wiki.pentest.ngs/index.php/Io-homecontrol))\r\n\r\n### Data source\r\n\r\nThe assumption is that you start with a data file containing the binary data bytes you want to send\r\n\r\nCreate a new flow-graph and set the \"samp\\_rate\\_tx\" variable to 4e6\r\n\r\n![](images/tx_samp_rate.png)\r\n\r\nAdd a \"File Source\" block and set the file to be your data file. Ensure that \"Repeat\" is set to \"No\" (unless you specifically want it to repeat)\r\n\r\n### Set the Baud rate\r\n\r\nHaving received the data, you should already know what the Baud rate should be set to. Add a new \"Variable\" block called \"baud\\_rate\" and set it to the correct value.\r\n\r\n![](images/tx_baud_rate.png)\r\n\r\n### Modulation\r\n\r\nAdd a new \"Variable\" called \"sps\" (samples per symbol) and set it's value to be 10\r\n\r\n![](images/tx_sps.png)\r\n\r\nChange the default \"samp\\_rate\" \"Variable\" block to 384000 (10 x Baud rate, as we want 10 samples per symbol)\r\n\r\nAdd a \"GFSK Mod\" block, which will modulate the data using FSK. Configure the following settings:\r\n\r\n-   \"Samples/Symbol\": sps\r\n\r\n<!-- -->\r\n\r\n-   \"Sensitivity\": 1\r\n\r\n<!-- -->\r\n\r\n-   \"BT\": 1 (this will effectively remove the Gaussian filter and make it FSK rather than GFSK)\r\n\r\n![](images/tx_gfsk_mod.png)\r\n\r\nYour flow-graph should now look like this:\r\n\r\n![](images/tx_source_and_mod.png)\r\n\r\n### Resampling\r\n\r\nWe now need to match the sample rate of the data with the transmitter (as it is the final sample rate of the transmitter that will actually determine the rate that the data is transmitted).\r\n\r\nAdd a \"Rational Resampler\" block with the following settings:\r\n\r\n-   \"Interpolation\": samp\\_rate\\_tx (the output sample rate)\r\n\r\n<!-- -->\r\n\r\n-   \"Decimation\": samp\\_rate (the input sample rate)\r\n\r\n![](images/tx_resampler.png)\r\n\r\n### Adjust the signal level\r\n\r\nWe don't want to overload the input to the transmitter so we need to attenuate (reduce) the signal level.\r\n\r\nAdd a \"Multiply Const\" block and set \"Constant\" to be 0.8\r\n\r\n![](images/tx_const.png)\r\n\r\n### Configure the transmitter\r\n\r\nWe are now ready to transmit the signal.\r\n\r\nAdd a \"Variable\" block with the name \"freq\" and value equal to the transmit frequency:\r\n\r\n![](images/tx_freq.png)\r\n\r\nAdd an \"osmocom Sink\" block with the following settings:\r\n\r\n-   \"Ch0: Frequency\": freq\r\n\r\n<!-- -->\r\n\r\n-   \"Ch0: RF Gain (dB)\": 30 (can be changed as required)\r\n\r\n<!-- -->\r\n\r\n-   \"Ch0: IF Gain (dB)\": 20 (can be changed as required)\r\n\r\n<!-- -->\r\n\r\n-   \"Ch0: BB Gain (dB)\": 20 (can be changed as required)\r\n\r\n![](images/tx_tx.png)\r\n\r\nThe complete transmitter flow-graph should now look like this:\r\n\r\n![](images/iohome_tx_crop.png)\r\n\r\n### Communicating with the transmitter in real-time\r\n\r\nRather than using a file as a source you can use a \"TCP Sink\" block, bind it to a socket and send it data via TCP\r\n\r\nSignals identification\r\n======================\r\n\r\nIn order to correctly demodulate a received signal you need to be able to identify it first. This section will provide some guidance around identifying common signals.\r\n\r\nThis [website](http://www.sigidwiki.com/wiki/Signal_Identification_Guide) is a good place to start.\r\n\r\nAmplitude Shift Keying (ASK)\r\n----------------------------\r\n\r\nThe below example is the most simple form of ASK, known as On-Off Keying (OOK):\r\n\r\n![](images/ask_baudline.png)\r\n\r\nFrequency Shift Keying (FSK)\r\n----------------------------\r\n\r\nThe below example is the most simple form of FSK, known as 2-FSK or Binary FSK:\r\n\r\n![](images/fsk_baudline.png)\r\n\r\nTODO - add more stuff here\r\n\r\nLegal considerations\r\n====================\r\n\r\nUnless you hold an [Amateur Radio license](http://licensing.ofcom.org.uk/radiocommunication-licences/amateur-radio/) or have had specific training about UK law with respect to the areas of the radio frequency spectrum and at what power levels you are allowed to transmit, it is highly recommended that you restrict yourself to only receiving. The amateur radio license is fairly easy to get and a few people in the company seem to have them. Try emailing DL-Tech and you may find someone local who is willing to lend you training materials or point you in the direction of a local club.\r\n\r\nA high level overview of UK law with respect to radio transmitters can be found [here](http://stakeholders.ofcom.org.uk/enforcement/spectrum-enforcement/law)\r\n\r\nExample flow-graphs and tutorials\r\n=================================\r\n\r\nSimple FM radio receiver\r\n------------------------\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}